

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: api_tareas_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Aplicaci√≥n Node.js
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_tareas_app
    restart: always
    ports:
      - "${PORT}:${PORT}"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
      SALT_ROUNDS: ${SALT_ROUNDS}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    networks:
      - api_network

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: api_tareas_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - api_network
    depends_on:
      - postgres

volumes:
  postgres_data:
  
networks:
  api_network:
    driver: bridge